// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/service/v1/message.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MessageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageListRequestMultiError, or nil if none found.
func (m *MessageListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := MessageListRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ToUserId

	// no validation rules for PreMsgTime

	if len(errors) > 0 {
		return MessageListRequestMultiError(errors)
	}

	return nil
}

// MessageListRequestMultiError is an error wrapping multiple validation errors
// returned by MessageListRequest.ValidateAll() if the designated constraints
// aren't met.
type MessageListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageListRequestMultiError) AllErrors() []error { return m }

// MessageListRequestValidationError is the validation error returned by
// MessageListRequest.Validate if the designated constraints aren't met.
type MessageListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageListRequestValidationError) ErrorName() string {
	return "MessageListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageListRequestValidationError{}

// Validate checks the field values on MessageListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageListReplyMultiError, or nil if none found.
func (m *MessageListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetMessageList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageListReplyValidationError{
						field:  fmt.Sprintf("MessageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageListReplyValidationError{
						field:  fmt.Sprintf("MessageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageListReplyValidationError{
					field:  fmt.Sprintf("MessageList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageListReplyMultiError(errors)
	}

	return nil
}

// MessageListReplyMultiError is an error wrapping multiple validation errors
// returned by MessageListReply.ValidateAll() if the designated constraints
// aren't met.
type MessageListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageListReplyMultiError) AllErrors() []error { return m }

// MessageListReplyValidationError is the validation error returned by
// MessageListReply.Validate if the designated constraints aren't met.
type MessageListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageListReplyValidationError) ErrorName() string { return "MessageListReplyValidationError" }

// Error satisfies the builtin error interface
func (e MessageListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageListReplyValidationError{}

// Validate checks the field values on MessageActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageActionRequestMultiError, or nil if none found.
func (m *MessageActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := MessageActionRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ToUserId

	// no validation rules for ActionType

	// no validation rules for Content

	if len(errors) > 0 {
		return MessageActionRequestMultiError(errors)
	}

	return nil
}

// MessageActionRequestMultiError is an error wrapping multiple validation
// errors returned by MessageActionRequest.ValidateAll() if the designated
// constraints aren't met.
type MessageActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageActionRequestMultiError) AllErrors() []error { return m }

// MessageActionRequestValidationError is the validation error returned by
// MessageActionRequest.Validate if the designated constraints aren't met.
type MessageActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageActionRequestValidationError) ErrorName() string {
	return "MessageActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageActionRequestValidationError{}

// Validate checks the field values on MessageActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageActionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageActionReplyMultiError, or nil if none found.
func (m *MessageActionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageActionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if len(errors) > 0 {
		return MessageActionReplyMultiError(errors)
	}

	return nil
}

// MessageActionReplyMultiError is an error wrapping multiple validation errors
// returned by MessageActionReply.ValidateAll() if the designated constraints
// aren't met.
type MessageActionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageActionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageActionReplyMultiError) AllErrors() []error { return m }

// MessageActionReplyValidationError is the validation error returned by
// MessageActionReply.Validate if the designated constraints aren't met.
type MessageActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageActionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageActionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageActionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageActionReplyValidationError) ErrorName() string {
	return "MessageActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MessageActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageActionReplyValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ToUserId

	// no validation rules for FromUserId

	// no validation rules for Content

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}
