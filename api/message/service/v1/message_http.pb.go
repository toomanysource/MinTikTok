// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.24.0
// source: message/service/v1/message.proto

package v1

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMessageServiceGetMessageList = "/message.service.v1.messageService/GetMessageList"
const OperationMessageServiceMessageAction = "/message.service.v1.messageService/MessageAction"

type MessageServiceHTTPServer interface {
	GetMessageList(context.Context, *MessageListRequest) (*MessageListReply, error)
	MessageAction(context.Context, *MessageActionRequest) (*MessageActionReply, error)
}

func RegisterMessageServiceHTTPServer(s *http.Server, srv MessageServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/message/chat", _MessageService_GetMessageList0_HTTP_Handler(srv))
	r.POST("/douyin/message/action", _MessageService_MessageAction0_HTTP_Handler(srv))
}

func _MessageService_GetMessageList0_HTTP_Handler(srv MessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MessageListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageServiceGetMessageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessageList(ctx, req.(*MessageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MessageListReply)
		return ctx.Result(200, reply)
	}
}

func _MessageService_MessageAction0_HTTP_Handler(srv MessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MessageActionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageServiceMessageAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MessageAction(ctx, req.(*MessageActionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MessageActionReply)
		return ctx.Result(200, reply)
	}
}

type MessageServiceHTTPClient interface {
	GetMessageList(ctx context.Context, req *MessageListRequest, opts ...http.CallOption) (rsp *MessageListReply, err error)
	MessageAction(ctx context.Context, req *MessageActionRequest, opts ...http.CallOption) (rsp *MessageActionReply, err error)
}

type MessageServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageServiceHTTPClient(client *http.Client) MessageServiceHTTPClient {
	return &MessageServiceHTTPClientImpl{client}
}

func (c *MessageServiceHTTPClientImpl) GetMessageList(ctx context.Context, in *MessageListRequest, opts ...http.CallOption) (*MessageListReply, error) {
	var out MessageListReply
	pattern := "/douyin/message/chat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMessageServiceGetMessageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageServiceHTTPClientImpl) MessageAction(ctx context.Context, in *MessageActionRequest, opts ...http.CallOption) (*MessageActionReply, error) {
	var out MessageActionReply
	pattern := "/douyin/message/action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageServiceMessageAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
