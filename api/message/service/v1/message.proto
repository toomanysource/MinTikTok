syntax = "proto3";

package message.service.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/toomanysource/atreus/api/feed/service/v1;v1";

service messageService {
	rpc GetMessageList(MessageListRequest) returns (MessageListReply) {
		option (google.api.http) = {
			get: "/douyin/message/chat"
		};
	}
	rpc MessageAction(MessageActionRequest) returns (MessageActionReply) {
		option (google.api.http) = {
			post: "/douyin/message/action"
			body: "*"
		};
	}
}

message MessageListRequest {
  // 用户鉴权token
  string token = 1 [(validate.rules).string.min_len = 1];
  // 对方用户id
  uint32 to_user_id = 2;
  //上次最新消息的时间
  int64 pre_msg_time = 3;
}

message MessageListReply {
  // 状态码，0-成功，其他值-失败
  int32 status_code = 1 [json_name = "status_code"];
  // 返回状态描述
  string status_msg = 2 [json_name = "status_msg"];
  // 消息列表
  repeated Message message_list = 3 [json_name = "message_list"];
}

message MessageActionRequest {
  // 用户鉴权token
  string token = 1 [(validate.rules).string.min_len = 1];
  // 对方用户id
  uint32 to_user_id = 2;
  // 1-发送消息
  uint32 action_type = 3;
  // 消息内容
  string content = 4;
}

message MessageActionReply {
  // 状态码，0-成功，其他值-失败
  int32 status_code = 1 [json_name = "status_code"];
  // 返回状态描述
  string status_msg = 2 [json_name = "status_msg"];
}

message Message {
  // 消息id
  uint64 id = 1 [json_name = "id"];
  // 该消息接收者的id
  uint32 to_user_id = 2 [json_name = "to_user_id"];
  // 该消息发送者的id
  uint32 from_user_id =3 [json_name = "from_user_id"];
  // 消息内容
  string content = 4 [json_name = "content"];
  // 消息创建时间
  int64 create_time = 5 [json_name = "create_time"];
}