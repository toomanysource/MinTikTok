// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.24.0
// source: feed/service/v1/feed.proto

package v1

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFeedServiceFeedList = "/api.feed.service.v1.FeedService/FeedList"

type FeedServiceHTTPServer interface {
	FeedList(context.Context, *ListFeedRequest) (*ListFeedReply, error)
}

func RegisterFeedServiceHTTPServer(s *http.Server, srv FeedServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/feed", _FeedService_FeedList0_HTTP_Handler(srv))
}

func _FeedService_FeedList0_HTTP_Handler(srv FeedServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeedRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedServiceFeedList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeedList(ctx, req.(*ListFeedRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeedReply)
		return ctx.Result(200, reply)
	}
}

type FeedServiceHTTPClient interface {
	FeedList(ctx context.Context, req *ListFeedRequest, opts ...http.CallOption) (rsp *ListFeedReply, err error)
}

type FeedServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFeedServiceHTTPClient(client *http.Client) FeedServiceHTTPClient {
	return &FeedServiceHTTPClientImpl{client}
}

func (c *FeedServiceHTTPClientImpl) FeedList(ctx context.Context, in *ListFeedRequest, opts ...http.CallOption) (*ListFeedReply, error) {
	var out ListFeedReply
	pattern := "/douyin/feed"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedServiceFeedList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
