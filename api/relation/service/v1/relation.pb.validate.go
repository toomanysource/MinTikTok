// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: relation/service/v1/relation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IsFollowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IsFollowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFollowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsFollowRequestMultiError, or nil if none found.
func (m *IsFollowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFollowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return IsFollowRequestMultiError(errors)
	}

	return nil
}

// IsFollowRequestMultiError is an error wrapping multiple validation errors
// returned by IsFollowRequest.ValidateAll() if the designated constraints
// aren't met.
type IsFollowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFollowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFollowRequestMultiError) AllErrors() []error { return m }

// IsFollowRequestValidationError is the validation error returned by
// IsFollowRequest.Validate if the designated constraints aren't met.
type IsFollowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFollowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFollowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFollowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFollowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFollowRequestValidationError) ErrorName() string { return "IsFollowRequestValidationError" }

// Error satisfies the builtin error interface
func (e IsFollowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFollowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFollowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFollowRequestValidationError{}

// Validate checks the field values on IsFollowReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsFollowReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFollowReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsFollowReplyMultiError, or
// nil if none found.
func (m *IsFollowReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFollowReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IsFollowReplyMultiError(errors)
	}

	return nil
}

// IsFollowReplyMultiError is an error wrapping multiple validation errors
// returned by IsFollowReply.ValidateAll() if the designated constraints
// aren't met.
type IsFollowReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFollowReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFollowReplyMultiError) AllErrors() []error { return m }

// IsFollowReplyValidationError is the validation error returned by
// IsFollowReply.Validate if the designated constraints aren't met.
type IsFollowReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFollowReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFollowReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFollowReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFollowReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFollowReplyValidationError) ErrorName() string { return "IsFollowReplyValidationError" }

// Error satisfies the builtin error interface
func (e IsFollowReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFollowReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFollowReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFollowReplyValidationError{}

// Validate checks the field values on RelationActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationActionRequestMultiError, or nil if none found.
func (m *RelationActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := RelationActionRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ToUserId

	// no validation rules for ActionType

	if len(errors) > 0 {
		return RelationActionRequestMultiError(errors)
	}

	return nil
}

// RelationActionRequestMultiError is an error wrapping multiple validation
// errors returned by RelationActionRequest.ValidateAll() if the designated
// constraints aren't met.
type RelationActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationActionRequestMultiError) AllErrors() []error { return m }

// RelationActionRequestValidationError is the validation error returned by
// RelationActionRequest.Validate if the designated constraints aren't met.
type RelationActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationActionRequestValidationError) ErrorName() string {
	return "RelationActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationActionRequestValidationError{}

// Validate checks the field values on RelationActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationActionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationActionReplyMultiError, or nil if none found.
func (m *RelationActionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationActionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if len(errors) > 0 {
		return RelationActionReplyMultiError(errors)
	}

	return nil
}

// RelationActionReplyMultiError is an error wrapping multiple validation
// errors returned by RelationActionReply.ValidateAll() if the designated
// constraints aren't met.
type RelationActionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationActionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationActionReplyMultiError) AllErrors() []error { return m }

// RelationActionReplyValidationError is the validation error returned by
// RelationActionReply.Validate if the designated constraints aren't met.
type RelationActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationActionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationActionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationActionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationActionReplyValidationError) ErrorName() string {
	return "RelationActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RelationActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationActionReplyValidationError{}

// Validate checks the field values on RelationFollowerListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationFollowerListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationFollowerListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationFollowerListRequestMultiError, or nil if none found.
func (m *RelationFollowerListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationFollowerListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return RelationFollowerListRequestMultiError(errors)
	}

	return nil
}

// RelationFollowerListRequestMultiError is an error wrapping multiple
// validation errors returned by RelationFollowerListRequest.ValidateAll() if
// the designated constraints aren't met.
type RelationFollowerListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationFollowerListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationFollowerListRequestMultiError) AllErrors() []error { return m }

// RelationFollowerListRequestValidationError is the validation error returned
// by RelationFollowerListRequest.Validate if the designated constraints
// aren't met.
type RelationFollowerListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationFollowerListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationFollowerListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationFollowerListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationFollowerListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationFollowerListRequestValidationError) ErrorName() string {
	return "RelationFollowerListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationFollowerListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationFollowerListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationFollowerListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationFollowerListRequestValidationError{}

// Validate checks the field values on RelationFollowerListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationFollowerListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationFollowerListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationFollowerListReplyMultiError, or nil if none found.
func (m *RelationFollowerListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationFollowerListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationFollowerListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationFollowerListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationFollowerListReplyValidationError{
					field:  fmt.Sprintf("UserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RelationFollowerListReplyMultiError(errors)
	}

	return nil
}

// RelationFollowerListReplyMultiError is an error wrapping multiple validation
// errors returned by RelationFollowerListReply.ValidateAll() if the
// designated constraints aren't met.
type RelationFollowerListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationFollowerListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationFollowerListReplyMultiError) AllErrors() []error { return m }

// RelationFollowerListReplyValidationError is the validation error returned by
// RelationFollowerListReply.Validate if the designated constraints aren't met.
type RelationFollowerListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationFollowerListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationFollowerListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationFollowerListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationFollowerListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationFollowerListReplyValidationError) ErrorName() string {
	return "RelationFollowerListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RelationFollowerListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationFollowerListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationFollowerListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationFollowerListReplyValidationError{}

// Validate checks the field values on RelationFollowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationFollowListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationFollowListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationFollowListRequestMultiError, or nil if none found.
func (m *RelationFollowListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationFollowListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return RelationFollowListRequestMultiError(errors)
	}

	return nil
}

// RelationFollowListRequestMultiError is an error wrapping multiple validation
// errors returned by RelationFollowListRequest.ValidateAll() if the
// designated constraints aren't met.
type RelationFollowListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationFollowListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationFollowListRequestMultiError) AllErrors() []error { return m }

// RelationFollowListRequestValidationError is the validation error returned by
// RelationFollowListRequest.Validate if the designated constraints aren't met.
type RelationFollowListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationFollowListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationFollowListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationFollowListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationFollowListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationFollowListRequestValidationError) ErrorName() string {
	return "RelationFollowListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationFollowListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationFollowListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationFollowListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationFollowListRequestValidationError{}

// Validate checks the field values on RelationFollowListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationFollowListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationFollowListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationFollowListReplyMultiError, or nil if none found.
func (m *RelationFollowListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationFollowListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationFollowListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationFollowListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationFollowListReplyValidationError{
					field:  fmt.Sprintf("UserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RelationFollowListReplyMultiError(errors)
	}

	return nil
}

// RelationFollowListReplyMultiError is an error wrapping multiple validation
// errors returned by RelationFollowListReply.ValidateAll() if the designated
// constraints aren't met.
type RelationFollowListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationFollowListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationFollowListReplyMultiError) AllErrors() []error { return m }

// RelationFollowListReplyValidationError is the validation error returned by
// RelationFollowListReply.Validate if the designated constraints aren't met.
type RelationFollowListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationFollowListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationFollowListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationFollowListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationFollowListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationFollowListReplyValidationError) ErrorName() string {
	return "RelationFollowListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RelationFollowListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationFollowListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationFollowListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationFollowListReplyValidationError{}

// Validate checks the field values on RelationFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationFriendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationFriendListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationFriendListRequestMultiError, or nil if none found.
func (m *RelationFriendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationFriendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := RelationFriendListRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RelationFriendListRequestMultiError(errors)
	}

	return nil
}

// RelationFriendListRequestMultiError is an error wrapping multiple validation
// errors returned by RelationFriendListRequest.ValidateAll() if the
// designated constraints aren't met.
type RelationFriendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationFriendListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationFriendListRequestMultiError) AllErrors() []error { return m }

// RelationFriendListRequestValidationError is the validation error returned by
// RelationFriendListRequest.Validate if the designated constraints aren't met.
type RelationFriendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationFriendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationFriendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationFriendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationFriendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationFriendListRequestValidationError) ErrorName() string {
	return "RelationFriendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationFriendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationFriendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationFriendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationFriendListRequestValidationError{}

// Validate checks the field values on RelationFriendListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationFriendListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationFriendListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationFriendListReplyMultiError, or nil if none found.
func (m *RelationFriendListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationFriendListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationFriendListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationFriendListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationFriendListReplyValidationError{
					field:  fmt.Sprintf("UserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RelationFriendListReplyMultiError(errors)
	}

	return nil
}

// RelationFriendListReplyMultiError is an error wrapping multiple validation
// errors returned by RelationFriendListReply.ValidateAll() if the designated
// constraints aren't met.
type RelationFriendListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationFriendListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationFriendListReplyMultiError) AllErrors() []error { return m }

// RelationFriendListReplyValidationError is the validation error returned by
// RelationFriendListReply.Validate if the designated constraints aren't met.
type RelationFriendListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationFriendListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationFriendListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationFriendListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationFriendListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationFriendListReplyValidationError) ErrorName() string {
	return "RelationFriendListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RelationFriendListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationFriendListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationFriendListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationFriendListReplyValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FollowCount

	// no validation rules for FollowerCount

	// no validation rules for IsFollow

	// no validation rules for Avatar

	// no validation rules for BackgroundImage

	// no validation rules for Signature

	// no validation rules for TotalFavorited

	// no validation rules for WorkCount

	// no validation rules for FavoriteCount

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on FriendUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendUserMultiError, or
// nil if none found.
func (m *FriendUser) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FollowCount

	// no validation rules for FollowerCount

	// no validation rules for IsFollow

	// no validation rules for Avatar

	// no validation rules for BackgroundImage

	// no validation rules for Signature

	// no validation rules for TotalFavorited

	// no validation rules for WorkCount

	// no validation rules for FavoriteCount

	// no validation rules for Message

	// no validation rules for MsgType

	if len(errors) > 0 {
		return FriendUserMultiError(errors)
	}

	return nil
}

// FriendUserMultiError is an error wrapping multiple validation errors
// returned by FriendUser.ValidateAll() if the designated constraints aren't met.
type FriendUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendUserMultiError) AllErrors() []error { return m }

// FriendUserValidationError is the validation error returned by
// FriendUser.Validate if the designated constraints aren't met.
type FriendUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendUserValidationError) ErrorName() string { return "FriendUserValidationError" }

// Error satisfies the builtin error interface
func (e FriendUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendUserValidationError{}
