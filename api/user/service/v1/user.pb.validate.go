// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/service/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FollowCount

	// no validation rules for FollowerCount

	// no validation rules for IsFollow

	// no validation rules for Avatar

	// no validation rules for BackgroundImage

	// no validation rules for Signature

	// no validation rules for TotalFavorited

	// no validation rules for WorkCount

	// no validation rules for FavoriteCount

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoRequestMultiError, or nil if none found.
func (m *UserInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := UserInfoRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserInfoRequestMultiError(errors)
	}

	return nil
}

// UserInfoRequestMultiError is an error wrapping multiple validation errors
// returned by UserInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type UserInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoRequestMultiError) AllErrors() []error { return m }

// UserInfoRequestValidationError is the validation error returned by
// UserInfoRequest.Validate if the designated constraints aren't met.
type UserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoRequestValidationError) ErrorName() string { return "UserInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoRequestValidationError{}

// Validate checks the field values on UserInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoReplyMultiError, or
// nil if none found.
func (m *UserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInfoReplyMultiError(errors)
	}

	return nil
}

// UserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by UserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type UserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReplyMultiError) AllErrors() []error { return m }

// UserInfoReplyValidationError is the validation error returned by
// UserInfoReply.Validate if the designated constraints aren't met.
type UserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReplyValidationError) ErrorName() string { return "UserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReplyValidationError{}

// Validate checks the field values on UserLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLoginRequestMultiError, or nil if none found.
func (m *UserLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return UserLoginRequestMultiError(errors)
	}

	return nil
}

// UserLoginRequestMultiError is an error wrapping multiple validation errors
// returned by UserLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type UserLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginRequestMultiError) AllErrors() []error { return m }

// UserLoginRequestValidationError is the validation error returned by
// UserLoginRequest.Validate if the designated constraints aren't met.
type UserLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginRequestValidationError) ErrorName() string { return "UserLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginRequestValidationError{}

// Validate checks the field values on UserLoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLoginReplyMultiError,
// or nil if none found.
func (m *UserLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return UserLoginReplyMultiError(errors)
	}

	return nil
}

// UserLoginReplyMultiError is an error wrapping multiple validation errors
// returned by UserLoginReply.ValidateAll() if the designated constraints
// aren't met.
type UserLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginReplyMultiError) AllErrors() []error { return m }

// UserLoginReplyValidationError is the validation error returned by
// UserLoginReply.Validate if the designated constraints aren't met.
type UserLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginReplyValidationError) ErrorName() string { return "UserLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginReplyValidationError{}

// Validate checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRequestMultiError, or nil if none found.
func (m *UserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 32 {
		err := UserRegisterRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 32 {
		err := UserRegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserRegisterRequestMultiError(errors)
	}

	return nil
}

// UserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by UserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRequestMultiError) AllErrors() []error { return m }

// UserRegisterRequestValidationError is the validation error returned by
// UserRegisterRequest.Validate if the designated constraints aren't met.
type UserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRequestValidationError) ErrorName() string {
	return "UserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRequestValidationError{}

// Validate checks the field values on UserRegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReplyMultiError, or nil if none found.
func (m *UserRegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return UserRegisterReplyMultiError(errors)
	}

	return nil
}

// UserRegisterReplyMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReply.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReplyMultiError) AllErrors() []error { return m }

// UserRegisterReplyValidationError is the validation error returned by
// UserRegisterReply.Validate if the designated constraints aren't met.
type UserRegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReplyValidationError) ErrorName() string {
	return "UserRegisterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReplyValidationError{}

// Validate checks the field values on UserInfosRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInfosRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfosRequestMultiError, or nil if none found.
func (m *UserInfosRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfosRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserInfosRequestMultiError(errors)
	}

	return nil
}

// UserInfosRequestMultiError is an error wrapping multiple validation errors
// returned by UserInfosRequest.ValidateAll() if the designated constraints
// aren't met.
type UserInfosRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfosRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfosRequestMultiError) AllErrors() []error { return m }

// UserInfosRequestValidationError is the validation error returned by
// UserInfosRequest.Validate if the designated constraints aren't met.
type UserInfosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfosRequestValidationError) ErrorName() string { return "UserInfosRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInfosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfosRequestValidationError{}

// Validate checks the field values on UserInfosReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfosReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfosReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfosReplyMultiError,
// or nil if none found.
func (m *UserInfosReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfosReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserInfosReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserInfosReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfosReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserInfosReplyMultiError(errors)
	}

	return nil
}

// UserInfosReplyMultiError is an error wrapping multiple validation errors
// returned by UserInfosReply.ValidateAll() if the designated constraints
// aren't met.
type UserInfosReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfosReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfosReplyMultiError) AllErrors() []error { return m }

// UserInfosReplyValidationError is the validation error returned by
// UserInfosReply.Validate if the designated constraints aren't met.
type UserInfosReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfosReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfosReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfosReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfosReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfosReplyValidationError) ErrorName() string { return "UserInfosReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserInfosReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfosReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfosReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfosReplyValidationError{}

// Validate checks the field values on UpdateFollowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFollowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFollowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFollowRequestMultiError, or nil if none found.
func (m *UpdateFollowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFollowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FollowChange

	if len(errors) > 0 {
		return UpdateFollowRequestMultiError(errors)
	}

	return nil
}

// UpdateFollowRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFollowRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFollowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFollowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFollowRequestMultiError) AllErrors() []error { return m }

// UpdateFollowRequestValidationError is the validation error returned by
// UpdateFollowRequest.Validate if the designated constraints aren't met.
type UpdateFollowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFollowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFollowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFollowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFollowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFollowRequestValidationError) ErrorName() string {
	return "UpdateFollowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFollowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFollowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFollowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFollowRequestValidationError{}

// Validate checks the field values on UpdateFollowerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFollowerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFollowerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFollowerRequestMultiError, or nil if none found.
func (m *UpdateFollowerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFollowerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FollowerChange

	if len(errors) > 0 {
		return UpdateFollowerRequestMultiError(errors)
	}

	return nil
}

// UpdateFollowerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFollowerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFollowerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFollowerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFollowerRequestMultiError) AllErrors() []error { return m }

// UpdateFollowerRequestValidationError is the validation error returned by
// UpdateFollowerRequest.Validate if the designated constraints aren't met.
type UpdateFollowerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFollowerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFollowerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFollowerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFollowerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFollowerRequestValidationError) ErrorName() string {
	return "UpdateFollowerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFollowerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFollowerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFollowerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFollowerRequestValidationError{}

// Validate checks the field values on UpdateFavoritedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFavoritedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFavoritedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFavoritedRequestMultiError, or nil if none found.
func (m *UpdateFavoritedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFavoritedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FavoritedChange

	if len(errors) > 0 {
		return UpdateFavoritedRequestMultiError(errors)
	}

	return nil
}

// UpdateFavoritedRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFavoritedRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFavoritedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFavoritedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFavoritedRequestMultiError) AllErrors() []error { return m }

// UpdateFavoritedRequestValidationError is the validation error returned by
// UpdateFavoritedRequest.Validate if the designated constraints aren't met.
type UpdateFavoritedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFavoritedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFavoritedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFavoritedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFavoritedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFavoritedRequestValidationError) ErrorName() string {
	return "UpdateFavoritedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFavoritedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFavoritedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFavoritedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFavoritedRequestValidationError{}

// Validate checks the field values on UpdateWorkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkRequestMultiError, or nil if none found.
func (m *UpdateWorkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for WorkChange

	if len(errors) > 0 {
		return UpdateWorkRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateWorkRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateWorkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkRequestMultiError) AllErrors() []error { return m }

// UpdateWorkRequestValidationError is the validation error returned by
// UpdateWorkRequest.Validate if the designated constraints aren't met.
type UpdateWorkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkRequestValidationError) ErrorName() string {
	return "UpdateWorkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkRequestValidationError{}

// Validate checks the field values on UpdateFavoriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFavoriteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFavoriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFavoriteRequestMultiError, or nil if none found.
func (m *UpdateFavoriteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFavoriteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FavoriteChange

	if len(errors) > 0 {
		return UpdateFavoriteRequestMultiError(errors)
	}

	return nil
}

// UpdateFavoriteRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFavoriteRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFavoriteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFavoriteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFavoriteRequestMultiError) AllErrors() []error { return m }

// UpdateFavoriteRequestValidationError is the validation error returned by
// UpdateFavoriteRequest.Validate if the designated constraints aren't met.
type UpdateFavoriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFavoriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFavoriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFavoriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFavoriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFavoriteRequestValidationError) ErrorName() string {
	return "UpdateFavoriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFavoriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFavoriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFavoriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFavoriteRequestValidationError{}
